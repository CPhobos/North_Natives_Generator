import re
import os 
import time
from datetime import datetime

now = datetime.now()
py_keywords = ["from", "property", "hash", "object", "range"]

pointer_pattern = re.compile("int\\*|float\\*|Any\\*|Vector3\\*|BOOL\\*|unsigned\\*")
arg_pattern = re.compile("int\\*|float|int|Any|Object|unsigned|BOOL|BOOL\\*|const char\\*|Any\\*|unsigned\\*|char\\*")
native_format = "snake_lower"

def get_formatted_args(input_args: list, use_comments: bool) -> str:
	return re.sub(arg_pattern,  "", input_args[i])

def remove_py_keywords(arg: str) -> str:
	for keyword in py_keywords:
		if(keyword == arg):
			return re.sub(keyword, "_{}".format(keyword), input_args[i])
	return arg

def get_pointer_count(arg) -> int:
	return len(re.findall("(\w+\*)", arg))

def handle_pointers(native_src: list) -> str:
    arr = list(range(get_pointer_count(native_src)))
    for x in range(len(arr)):
        arr[x] = x + 1
    return ", ".join(str(n) for n in arr)

def extract_non_pointer_args(string: str) -> list:
	try:
		result = re.findall(r'(?<=int) (\w+)', string)[0]
	except:
		return ""
	return result

def does_native_have_pointers(native_args: list) -> bool:
	return len(re.findall(pointer_pattern, native_args)) != 0

def format_pointer_result(native_args: int) -> str:
	return "(" + ", ".join("result.raw[{}].{}".format(i, "int") for i in range(1, get_pointer_count(native_args) + 1)) + ")"

def get_return_types(src: list) -> list:
	match = re.findall("static (\w+)", src)
	if(len(match)) != 0:
		return match
	return [""]


def get_native_hashes(src: list) -> list:
	match = re.findall(r"//\s?(0x[A-Za-z0-9]+)", src)
	if(len(match) != 0):
		return match
	return [""]

def get_native_args(src: list) -> list:
	match = re.findall("\w+\((.*?)\)", src)
	if(len(match) != 0):
		return match
	return [""]

def get_native_names(src: list, _format: str) -> list:
	if(_format == "fivem"):
		match = re.findall(r"(\w+)\s*\(", fivem_format(src))
	elif(_format == "snake_lower"):
		match = re.findall(r"(\w+)\s*\(", src.lower())
	elif(_format == "snake_cap"):
		match = re.findall(r"(\w+)\s*\(", src)
	if(match):
		return match
	return [""]


def has_return_type(arg: str) -> bool:
	return "return" if arg != "void" else ""


def capitalize_after_underscore(s):
	split_str = s.split('_')
	split_str = [word.capitalize() for word in split_str]
	split_str[0] = split_str[0].lower()
	return '_'.join(split_str)

def fivem_format(strr):
	return re.sub("\_", "", capitalize_after_underscore(strr.lower()))

def find_natives_file() -> str:
	files = [f for f in os.listdir('.') if os.path.isfile(f)]
	for f in files:
		match = re.search("\w+\\.hpp|\w+\\.h", f)
		if(match != None):
			return match[0]
	return False

found_natives = find_natives_file()
if(found_natives):
	natives_file = found_natives
else:
	print("Natives file not found!")
	exit()


def sanitize_user_input(user_inp) -> str:	 # I already know someone will break it...
	if(len(re.findall("[a-zA-Z]", user_inp)) != 0):
		print("String found... Defaulting to fivem..")
		return "fivem"
	user_inp = int(user_inp)
	if(user_inp <= 3):
		if(user_inp == 1):
			return "snake_lower"
		elif(user_inp == 2):
			return "snake_cap"
		else:
			return "fivem"



user_input = input("""Which format do you wanna use? \n [1] Snake Case Lower \n [2] Snake Case Higher \n [3] Fivem \n""")
native_format = sanitize_user_input(user_input)

with open(natives_file, "r") as f:
    natives_src = f.read()

return_types 	= 	get_return_types(natives_src)
native_hashes 	= 	get_native_hashes(natives_src)
native_args 	= 	get_native_args(natives_src)
native_names 	= 	get_native_names(natives_src, native_format)


pointer_template = """ 
def {}({}):
	native.output_flag({}, [{}])
	result = native.invoke({}, {})
	return (result.raw{})

"""

arg_template = """ 
def {}({}):
	{} native.invoke({}, {})

"""

no_arg_template = """  
def {}():
	{} native.invoke({})
"""

start_time = time.time()
with open("natives.py", "a") as natives_file:
	natives_file.write('# Generated By Phobos {}\n'.format(now.strftime("%d/%m/%Y %H:%M:%S")))
	natives_file.write('# https://github.com/CorPhobos/North_Natives_Generator\n')
	for i in range(len(native_hashes)):
		name = native_names[i]
		args = get_formatted_args(native_args, False)
		extracted_pointer = extract_non_pointer_args(native_args[i])
		hashes = native_hashes[i - 1]
		pointer_result = format_pointer_result(native_args[i])
		if(does_native_have_pointers(native_args[i])):
			natives_file.write(pointer_template.format(name, extracted_pointer, hashes, handle_pointers(native_args[i]), hashes, extracted_pointer, pointer_result))
		elif(native_args[i] != ""):
			natives_file.write(arg_template.format(name, args, has_return_type(return_types[i]), hashes, args))
		else:
			natives_file.write(no_arg_template.format(name, has_return_type(return_types[i]), hashes))
end_time = time.time()
print("Done! Completed in {} Seconds".format(end_time - start_time))
